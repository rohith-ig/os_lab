alias usp R0;
alias num R1;
usp = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = usp;
num = [[PTBR + 2*((usp-5)/512)]*512 + (usp-5)%512];
alias flag R2;
alias i R3;
alias filename R4;
filename = [[PTBR + 2*((usp-4)/512)]*512 + (usp-4)%512];
i = 0;
flag = 0;
while (i < MAX_FILE_NUM) do 
    if ([INODE_TABLE + i*16 +1] == filename) then
        flag = 1;
        break;
    endif;
    i = i + 1;
endwhile;
alias inode R7;
alias ret R8;
inode = INODE_TABLE + i*16;
ret = [PTBR + 2*((usp-1)/512)]*512 + (usp-1)%512;

if (num == 1) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 1;
    alias perm R5;
    perm = [[PTBR + 2*((usp-3)/512)]*512 + (usp-3)%512];
    if (flag == 1) then
        [ret] = 0;
    else
        i = 0;
        while (i < MAX_FILE_NUM) do
            if ([INODE_TABLE + i*16 + 1] == -1) then
                break;
            else
                i = i + 1;
            endif;
        endwhile;
        if (i == MAX_FILE_NUM) then
            [ret] = -1;
        else 
            inode = INODE_TABLE + i*16;
            [inode + 0] = DATA; 
            [inode + 1] = filename; 
            [inode + 2] = 0;
            [inode + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 3];  
            [inode + 4] = perm;
            [ROOT_FILE + i*8 + 0] = filename; 
            [ROOT_FILE + i*8 + 1] = 0; 
            [ROOT_FILE + i*8 + 2] = DATA; 
            [ROOT_FILE + i*8 + 3] = [USER_TABLE + [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 3] * 2];
            [ROOT_FILE + i*8 + 4] = perm;
            [ret] = 0;
        endif;
    endif;
endif;

if (num == 4) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 4;
    if (flag == 0) then
        print("not found");
        [ret] = 0;
    else
        if ([inode + 0] != DATA) then
            [ret] = -1;
        else
            if ([inode + 4] == EXCLUSIVE && [SYSTEM_STATUS_TABLE + 0] != 1 && [inode + 3] != [PROCESS_TABLE + i * 16 + 3]) then
                [ret] = -1;
            else
                multipush(R0,R1,R2,R3,R4);
                R1 = 4;
                R2 = i;
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call MOD_0;
                multipop(R0,R1,R2,R3,R4);
                if ([FILE_STATUS_TABLE + i*4 + 1] != -1) then
                    multipush(R0,R1,R2,R3,R4);
                    R1 = 5;
                    R2 = i;
                    R3 = [SYSTEM_STATUS_TABLE + 1];
                    call MOD_0;
                    multipop(R0,R1,R2,R3,R4);
                    [ret] = -2;
                else
                    alias j R5;
                    j = 0;
                    while (j<4) do
                        if ([inode + 8 + j] == -1) then
                            break;
                        endif;
                        alias buf R6;
                        buf = [inode + 8 + j]%4;
                        if ([BUFFER_TABLE + buf*4] == [inode + 8 + j] && [BUFFER_TABLE + buf*4 + 1] == 1) then
                            [BUFFER_TABLE + buf*4 + 1] = 0;
                        endif;
                        multipush(R0,R1,R2,R3,R4,R5,R6);
                        R1 = 4;
                        R2 = [inode + 8 + j];
                        R3 = [SYSTEM_STATUS_TABLE + 1];
                        call MEMORY_MANAGER;
                        multipop(R0,R1,R2,R3,R4,R5,R6);
                        j = j + 1;
                    endwhile;
                    j = 0;
                    while (j<16) do
                        [inode + j] = -1;
                        j = j + 1;
                    endwhile;
                    j = 0;
                    while (j<8) do
                        [ROOT_FILE + i*8 + j] = -1;
                        j = j + 1;
                    endwhile;
                    multipush(R0,R1,R2,R3,R4,R5,R6);
                    R1 = 5;
                    R2 = i;
                    R3 = [SYSTEM_STATUS_TABLE + 1];
                    call MOD_0;
                    multipop(R0,R1,R2,R3,R4,R5,R6);
                    [ret] = 0;
                endif;
            endif;
        endif;
    endif;
endif;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
SP = usp;
ireturn;



