alias fnum R1;

if (fnum == 1) then
    alias i R1;
    alias ret R0;
    i = 0;
    ret = -1;
    while (i<16) do
        if ([PROCESS_TABLE + i*16 + 4] == TERMINATED) then
            ret = i;
            break;
        endif;
        i = i + 1;
    endwhile;
    if (ret == -1) then
        return;
    else
    [PROCESS_TABLE + ret*16 + 4] = ALLOCATED;
    [PROCESS_TABLE + ret*16 + 1] = ret;
    [PROCESS_TABLE + ret*16 + 14] = PAGE_TABLE_BASE + ret*20;
    [PROCESS_TABLE + ret*16 + 15] = 10;
    return;
    endif;
endif;

if (fnum == 2) then
    alias pid R2;
    alias ua R3;
    ua = [PROCESS_TABLE + pid*16 + 11];
    alias i R4;
    i = 512-16;
    while (i < 512) do
        if ([ua*512 + i] == SEMAPHORE) then
            multipush(R0,R1,R2,R3,R4);
            R1 = 7;
            R2 = [ua*512 + i + 1];
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_0;
            multipop(R0,R1,R2,R3,R4);
        else 
            if ([ua*512 + i] == FILE) then
                multipush(R0,R1,R2,R3,R4);
                R1 = 4;
                R2 = [ua*512 + i + 1];
                call FILE_MANAGER;
                multipop(R0,R1,R2,R3,R4);
            endif;
        endif;
        i = i + 2;
    endwhile;
    multipush(R0,R1,R2,R3);
    R1 = 2;
    R2 = ua;
    call MOD_2;
    multipop(R0,R1,R2,R3);
    return;
endif;

if (fnum == 3) then
    alias pid R2;
    multipush(R0,R1,R2);
    R1 = 4;
    call MOD_1;
    multipop(R0,R1,R2);
    multipush(R0,R1,R2);
    R1 = 2;
    call MOD_1;
    multipop(R0,R1,R2);
    [PROCESS_TABLE + pid*16 + 4] = TERMINATED;
    if ([PROCESS_TABLE + pid*16 + 9] != 9) then
        alias i R3;
        i = 0;
        while (i<16) do
        if (([PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + i*16 + 5] == pid)) then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;
        if ([PROCESS_TABLE + i*16 + 2] == pid) then
            [PROCESS_TABLE + i*16 + 2] = -1;
        endif;
        i = i + 1;
        endwhile;
    endif;
    return;
endif;

if (fnum == 4) then
    alias pid R2;
    alias i R3;
    alias temp R4;
    i = 0;
    while (i<8) do
        temp = [PTBR+4+2*i];
        [PTBR + 4 + 2*i] = -1;
        [PTBR + 4 + 2*i+1] = "0000";
        i = i + 1;
        if (temp != -1) then
            multipush(R0,R1,R2,R3,R4);
            R1 = 2;
            R2 = temp;
            call MOD_2;
            multipop(R0,R1,R2,R3,R4);
        endif;
    endwhile;
    i = 0;
    while (i<4) do
        if (i < 2) then
            temp = [DISK_MAP_TABLE + pid*10 + 2 + i];
            if (temp != -1) then
                multipush(R1,R2,R3,R4);
                R1 = 4;
                R2 = temp;
                call MOD_2;
                multipop(R1,R2,R3,R4);
            endif;
        else
            temp = [DISK_MAP_TABLE + pid*10 + 8 + (i-2)];
            if (temp != -1) then
                multipush(R1,R2,R3,R4);
                R3 = pid;
                R1 = 4;
                R2 = temp;
                call MOD_2;
                multipop(R1,R2,R3,R4);
            endif;
        endif;
        i = i + 1;
    endwhile;
    return;
endif;

if (fnum == 5) then
    alias i R2;
    alias pid R3;
    i = 0;
    while (i < MAX_FILE_NUM) do   
        if ([INODE_TABLE + i*16 + 1] != -1) then
            multipush(R1,R2,R3);
            R3 = pid;
            R2 = i;
            R1 = 4;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;
    i = 2;
    while (i < MAX_PROC_NUM - 1) do
        if (i != pid && [PROCESS_TABLE + i*16 + 4] != TERMINATED) then
            multipush(R1,R2,R3);
            R2 = i;
            R1 = 3;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;
    i = 0;
    while (i < MAX_FILE_NUM) do   
        if ([INODE_TABLE + i*16 + 1] != -1) then
            multipush(R1,R2,R3);
            R3 = pid;
            R2 = i;
            R1 = 5;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;
    return;
endif;
