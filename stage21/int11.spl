alias sys R0;
alias user R1;
alias pid R2;

user = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = user;

sys = [[PTBR + 2*((user-5)/512)]*512 + (user-5)%512];

if (sys == 13) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 13;
    pid = [[PTBR + 2*((user-4)/512)]*512 + (user-4)%512];
    if ((pid<0 || pid>15) ||  (pid == [SYSTEM_STATUS_TABLE+1]) || ([PROCESS_TABLE + pid*16 + 4] == TERMINATED)) then
        [[PTBR + 2*((user-1)/512)]*512 + (user-1)%512] = -1;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
        SP = user;
    endif;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_PROCESS;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 5] = pid;
    multipush(R0,R1,R2);
    call MOD_5;
    multipop(R0,R1,R2);
    breakpoint;
    [[PTBR + 2*((user-1)/512)]*512 + (user-1)%512] = 0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
    SP = user;
    ireturn;
endif;

if (sys == 14) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 14;
    alias i R3;
    i = 0;
    while (i<16) do
        if (([PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + i*16 + 5] == [SYSTEM_STATUS_TABLE+1])) then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;
        i = i + 1;
    endwhile;
    breakpoint;
    [[PTBR + 2*((user-1)/512)]*512 + (user-1)%512] = 0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
    SP = user;
    ireturn;
endif;

if (sys == 11) then
    [[PTBR + 2*((user-1)/512)]*512 + (user-1)%512] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 1];
    SP = user;
    ireturn;
endif;

if (sys == 12) then
    [[PTBR + 2*((user-1)/512)]*512 + (user-1)%512] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 2];
    SP = user;
    ireturn;
endif;



