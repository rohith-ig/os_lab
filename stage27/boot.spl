// exhandler
loadi(2, 15);
loadi(3, 16);

// timer interrupt
loadi(4, 17);
loadi(5, 18);

// write interrupt
loadi(16, 29);
loadi(17, 30);

// int 10
loadi(22, 35);
loadi(23, 36);

// Library
loadi(63, 13);
loadi(64, 14);

// init
loadi(65, 7);
loadi(66, 8);

// module 5
loadi(50, 63);
loadi(51, 64);

// module 0
loadi(40, 53);
loadi(41, 54);

// module 4
loadi(48, 61);
loadi(49, 62);

// console interrupt
loadi(8, 21);
loadi(9, 22);

// int 6
loadi(14, 27);
loadi(15, 28);

// int 9
loadi(20, 33);
loadi(21, 34);

// module 1
loadi(42, 55);
loadi(43, 56);

// module 2
loadi(44, 57);
loadi(45, 58);

// inode user table
loadi(59, 3);
loadi(60, 4);

// disk interrupt
loadi(6, 19);
loadi(7, 20);

// disk free list
loadi(61, 2);

// int 8 (fork)
loadi(18, 31);
loadi(19, 32);

//int 15(shutdown)
loadi(32,45);
loadi(33,46);

//int 11(wait and signal)
loadi(24,37);
loadi(25,38);

// int 13 (sem acq rel)
loadi(28, 41);
loadi(29, 42);
 
// int 14 (sem lock unlock)
loadi(30, 43);
loadi(31, 44);

// int4
loadi(10, 23);
loadi(11, 24);

// root file
loadi(62, 5);

// disk free list
loadi(61, 2);

// module 3
loadi(46, 59);
loadi(47, 60);

// int 5
loadi(12, 25);
loadi(13, 26);

//int 16
loadi(34,47);
loadi(35,48);

//int12
loadi(26,39);
loadi(27,40);

//int17
loadi(36,49);
loadi(37,50);

//shell
loadi(67,9);
loadi(68,10);

// module  6
loadi(52, 65);
loadi(53, 66);

// memory free list initialization
alias i R0;
i = 0;
while (i < 128) do
    if (i < 81) then
        [MEMORY_FREE_LIST  + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;


PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

alias pt R2;
pt = PROCESS_TABLE + 16;
[pt] = 0;
[pt + 6] = 0;
[pt + 1] = 1;
[pt + 11] = 77;
[pt + 12] = 0;
[pt + 13] = 8 * 512;
[pt + 14] = PTBR;
[pt + 15] = PTLR;
[pt + 4] = CREATED;
[66 * 512] = [65 * 512 + 1];


PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;
pt = PROCESS_TABLE + 32;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";
[pt + 6] = 0;
[pt] = 0;
[pt + 1] = 2;
[pt + 2] = 1;
[pt + 11] = 80;
[pt + 12] = 0;
[pt + 13] = 8 * 512;
[pt + 14] = PTBR;
[pt + 15] = PTLR;
[pt + 4] = TERMINATED;
[78 * 512] = [65 * 512 + 1];

i = 1;
while (i < 9) do
    [([pt+ 11] + 1) * 512 - 2 * i] = -1;
    i = i + 1;
endwhile;

alias diskMapTable R1;
diskMapTable = DISK_MAP_TABLE + 20;
i = 0;
while (i < 10) do
    [diskMapTable + i] = -1;
    i = i + 1;
endwhile;

[diskMapTable + 4] = 9;
[diskMapTable + 5] = 10;


i = 2;
while (i < 16) do
    alias ptt R5;
    ptt = PROCESS_TABLE + 16*i;
    [ptt] = 0;
    [ptt + 6] = 0;
    [ptt + 4] = TERMINATED;
    i = i + 1;
endwhile;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;
[SYSTEM_STATUS_TABLE + 0] = 1;
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 4] = 0;
[SYSTEM_STATUS_TABLE + 5] = 0;


i = 0;
while (i<32) do
    alias sem R3;
    alias opem R4;
    sem = SEMAPHORE_TABLE + 4*i;
    opem = OPEN_FILE_TABLE + 4*i;
    [sem] = -1;
    [sem + 1] = 0;
    [opem + 0] = -1;
    [opem + 1] = 0;
    i = i + 1;
endwhile;

i = 0;
while (i < MAX_FILE_NUM) do
    alias fs R7;
    fs = FILE_STATUS_TABLE + i*4;
    [fs + 0] = -1;
    [fs + 1] = -1;
    i = i + 1;
endwhile;

i = 0;
while (i<4) do
    alias buf R6;
    buf = BUFFER_TABLE + i*4;
    [buf + 0] = -1;
    [buf + 1] = 0;
    [buf + 2] = -1;
    i = i + 1;
endwhile;


return;