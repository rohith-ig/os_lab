alias pid R0;
alias stack R1;
alias newPid R2;
pid = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + pid*16 + 9] = 8;
stack = SP;
[PROCESS_TABLE + pid*16 + 13] = SP;
SP = [PROCESS_TABLE + pid*16 + 11]*512 - 1;

multipush(R1);
R1 = 1;
call MOD_1;
multipop(R1);

if (pid == -1) then  
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 0;
    [[PTBR + 2*((stack-1)/512)] * 512 + (stack - 1)%512] = -1;
    SP = stack;
else 
    newPid = pid;
    if ([PTBR + 4] == -1) then
        multipush(R0,R1,R2);
        R1 = 1;
        call MEMORY_MANAGER;
        [PTBR + 4] = R0;
        [PTBR + 5] = "0110";
        R1 = 1;
        call MEMORY_MANAGER;
        [PTBR + 6] = R0;
        [PTBR + 7] = "0110";
        multipop(R0,R1,R2);
    endif;
    //allocating pages for user area and stack
    multipush(R2);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R2);
    [PROCESS_TABLE + newPid*16 + 11] = R0;
    multipush(R2);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R2);
    [PAGE_TABLE_BASE + newPid*20 + 16] = R0;
    [PAGE_TABLE_BASE + newPid*20 + 17] = "0110";
    multipush(R2);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R2);
    [PAGE_TABLE_BASE + newPid*20 + 18] = R0;
    [PAGE_TABLE_BASE + newPid*20 + 19] = "0110";
    //process table setup
    [PROCESS_TABLE + newPid*16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 3];
    [PROCESS_TABLE + newPid*16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 6];
    [PROCESS_TABLE + newPid*16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 7];
    [PROCESS_TABLE + newPid*16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 10];
    [PROCESS_TABLE + newPid*16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
    
    [PROCESS_TABLE + newPid*16 + 0] = 0;
    [PROCESS_TABLE + newPid*16 + 9] = 0;
    [PROCESS_TABLE + newPid*16 + 12] = 0;
    [PROCESS_TABLE + newPid*16 + 4] = CREATED;
    [PROCESS_TABLE + newPid*16 + 2] = [SYSTEM_STATUS_TABLE + 1];

    //page table
    alias i R3;
    i = 0;
    while (i<16) do
        [PAGE_TABLE_BASE + newPid*20 + i] = [PTBR + i];
        [PAGE_TABLE_BASE + newPid*20 + i + 1] = [PTBR + i + 1];
        if ([PTBR + i] != -1) then
            [MEMORY_FREE_LIST + [PTBR + i]] = [MEMORY_FREE_LIST + [PTBR + i]] + 1;
        endif;
        i = i + 2;
    endwhile; 
    //resource
    i = 512 - 16;
    while (i < 512) do
        [[PROCESS_TABLE + newPid * 16 + 11] * 512 + i] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i];
        [[PROCESS_TABLE + newPid * 16 + 11] * 512 + i + 1] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i + 1];
        if ([[PROCESS_TABLE + newPid*16 + 11]*512 + i] == 1) then
            alias j R4;
            j = [[PROCESS_TABLE + newPid*16 + 11]*512 + i + 1];
            [SEMAPHORE_TABLE + 4*j + 1] = [SEMAPHORE_TABLE + 4*j + 1] + 1;
        endif;
        i = i + 2;
    endwhile;

    // disk map table for child
    i = 0;
    while (i < 10) do
        [DISK_MAP_TABLE + 10 * newPid + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
        i = i + 1;
    endwhile;

    //stack
    i = 0;
    while (i<512) do
        [[PAGE_TABLE_BASE + newPid*20 + 16]*512 + i] = [[PTBR + 16]*512 + i];
        i = i + 1;
    endwhile;
    i = 0;
    while (i<512) do
        [[PAGE_TABLE_BASE + newPid*20 + 18]*512 + i] = [[PTBR + 18]*512 + i];
        i = i + 1;
    endwhile;
    [[PROCESS_TABLE + newPid*16 + 11]*512] = BP;
    stack = [PROCESS_TABLE + newPid*16 + 13];
    [[[PROCESS_TABLE + newPid*16 + 14] + 2*((stack-1)/512)] * 512 + (stack - 1)%512] = 0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 0;
    stack = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
    [[PTBR + 2*((stack-1)/512)] * 512 + (stack - 1)%512] = newPid;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
endif;
ireturn;

     





